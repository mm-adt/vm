obj   ::= (type | value)q
type  ::= ctype | dtype
ctype ::= bool | int  | real | str | poly | '_'
poly  ::= lst | rec | inst
q     ::= '{' int (',' int)? '}'
dtype ::= ctype q? ('<=' ctype q?)? inst*
sep   ::= ';' | ',' | '|'
lst   ::= '(' obj (sep obj)* ')' q?
rec   ::= '(' obj '->' obj (sep obj '->' obj)* ')' q?
inst  ::= '[' op(','obj)* ']' q?
op    ::= 'a' | 'add' | 'and' | 'as' | 'combine' | 'count' | 'eq' |
          'error' | 'explain' | 'fold' | 'from' | 'get' | 'given' |
          'groupCount' | 'gt' | 'gte' | 'head' | 'id' | 'is' | 'last' |
          'lt' | 'lte' | 'map' | 'merge' | 'mult' | 'neg' | 'noop' |
          'one' | 'or' | 'path' | 'plus' | 'pow' | 'put' | 'q' | 'repeat' |
          'split' | 'start' | 'tail' | 'to' | 'trace' | 'type' | 'zero'